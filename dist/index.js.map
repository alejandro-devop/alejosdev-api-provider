{"version":3,"file":"index.js","sources":["../src/classes.ts","../src/ctx.ts","../src/ApiContext.tsx","../src/hooks.ts"],"sourcesContent":["import { DoRequestConfig, HttpClientConfig } from './types'\n\n/**\n * Class with methods to handle api requests\n */\nexport class HttpClient {\n    /**\n     * The server or backend url\n     */\n    private readonly apiUrl: string\n    /**\n     * Object containig the available application endpoints\n     */\n    private readonly endpoints: { [k: string]: any }\n    /**\n     * The authentication token to be used in every requests\n     */\n    private apiToken?: string\n\n    public constructor(config: HttpClientConfig) {\n        const { apiUrl, endpoints } = config\n        this.apiUrl = apiUrl\n        this.endpoints = endpoints\n    }\n\n    /**\n     * Replace the params in the given string with the params given in the replacements object\n     * example, given the \"/some/some/{id}\" and the replacements: { id: \"var\" }\n     * the resulting string will be \"/some/some/var\"\n     * @param url\n     * @param replacements\n     * @returns\n     */\n    public replaceParams = (url: string, replacements?: { [k: string]: any }): string => {\n        if (!replacements) {\n            return url\n        }\n        return Object.keys(replacements).reduce((newUrl, key) => {\n            newUrl = newUrl.replace(`{${key}}`, replacements[key])\n            return newUrl\n        }, url)\n    }\n\n    /**\n     * Searches the given key in the endpoints object.\n     * @param path\n     * @param config\n     * @returns\n     */\n    public resolveEndpoint = (path: string, config: DoRequestConfig) => {\n        const { method = 'GET' } = config\n        const url: string = this.endpoints[path] as string\n        if (url.includes(':')) {\n            const [urlMethod, urlPath] = url.split(':')\n            if (urlMethod.toLowerCase() !== method.toLowerCase()) {\n                throw new Error(\n                    `Method does not match, required: '${urlMethod}' received: '${method.toLowerCase()}' `\n                )\n            }\n            return `${this.apiUrl}${urlPath}`\n        }\n        return `${this.apiUrl}${url}`\n    }\n\n    /**\n     * Executes an api request using the fetch function.\n     * @param endpoint\n     * @param config\n     * @returns\n     */\n    public doRequest = async (\n        endpoint: string,\n        config: DoRequestConfig\n    ): Promise<{\n        status: number\n        headers: any\n        url: string\n        payload: any\n        response: any\n    }> => {\n        try {\n            const { payload, method = 'GET' } = config\n            let urlForRequest = this.resolveEndpoint(endpoint, config)\n            urlForRequest = this.replaceParams(urlForRequest, config?.replacements)\n            const requestHeaders: any = {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            }\n\n            if (this.apiToken) {\n                requestHeaders['Authorization'] = `Bearer ${this.apiToken}`\n            }\n\n            const fetchResponse = await fetch(urlForRequest, {\n                headers: requestHeaders,\n                method,\n                body: JSON.stringify(payload)\n            })\n            const { status, headers, url } = fetchResponse\n            const jsonResponse = await fetchResponse.json()\n            return {\n                status,\n                headers,\n                url,\n                payload,\n                response: jsonResponse\n            }\n        } catch (err) {\n            throw err\n        }\n    }\n\n    /**\n     * sets the token to be used in the requests\n     * @param token\n     */\n    public setApiToken = (token?: string) => {\n        this.apiToken = token\n    }\n\n    /**\n     * returns the current token.\n     * @returns string\n     */\n    public getApiToken = () => this.apiToken\n}\n","import { createContext } from 'react'\nimport { ApiContextType } from './types'\n\nexport const ApiCtx = createContext<ApiContextType>({})\n\nexport const ApiProvider = ApiCtx.Provider\nexport const ApiConsumer = ApiCtx.Consumer\n","import React, { useRef, useEffect, useMemo } from 'react'\nimport { HttpClient } from './classes'\nimport { ApiProvider } from './ctx'\n\ninterface APIContextProps {\n    children?: React.ReactNode\n    endpoints: { [k: string]: any }\n    apiUrl?: string\n    token?: string\n    logged?: boolean\n}\n\n/**\n * Context for the API requests, it instance the http client and allow access to it\n * through the React context api.\n * @param param0\n * @returns\n */\nconst ApiContext: React.FC<APIContextProps> = ({ children, apiUrl, endpoints, token, logged }) => {\n    const client = useRef(\n        new HttpClient({\n            apiUrl: apiUrl || '',\n            endpoints\n        })\n    ).current\n    client.setApiToken(token)\n\n    const apiToken = useMemo(() => client.getApiToken(), [client])\n\n    useEffect(() => {\n        if (logged && apiToken !== token) {\n            client.setApiToken(token)\n        }\n    }, [apiToken, logged, token, client])\n\n    return (\n        <ApiProvider\n            value={{\n                client\n            }}\n        >\n            {children}\n        </ApiProvider>\n    )\n}\n\nexport default ApiContext\n","import { ApiConfigType, DoRequestConfig, HookReturnType, HookReturnWithPayloadType } from './types'\nimport { ApiCtx } from './ctx'\nimport { useCallback, useContext, useEffect, useRef, useState } from 'react'\n\n/**\n * Hook to access the API client context\n * @returns\n */\nconst useApiCtx = () => {\n    return useContext(ApiCtx)\n}\n\n/**\n * Hook to execute api request using the api client\n * @param endpoint\n * @param config\n * @returns\n */\nexport const useRequest = <PayloadType = {}>(\n    endpoint: string,\n    config?: ApiConfigType<DoRequestConfig>\n): [any, any, any?] => {\n    const [loading, setLoading] = useState<boolean>(false)\n    const [errors, setErrors] = useState<string[] | undefined>()\n    const { client } = useApiCtx()\n    const executed = useRef<boolean>(false)\n    /**\n     * Function to send the request to the server, it just uses the\n     * doRequest method from the Client class\n     * @param p\n     * @returns\n     */\n    const sendRequest = async (p: PayloadType, configOverride?: ApiConfigType): Promise<any> => {\n        setLoading(true)\n        executed.current = true\n        try {\n            /**\n             * The errors are stored in a different state so they can be returned\n             * as a part of the response, also the backed is programmed to\n             * always return an errors variable with the compilation of errors.\n             */\n            setErrors(undefined)\n            const { response } =\n                (await client?.doRequest(endpoint, {\n                    ...config,\n                    ...configOverride,\n                    payload: p\n                })) || {}\n            const { errors } = response\n            if (!response.status && errors) {\n                setErrors(errors)\n            }\n            setLoading(false)\n            return response as any\n        } catch (err) {\n            console.error(err)\n            setLoading(false)\n            return {} as any\n        }\n    }\n\n    return [sendRequest, loading, { errors, executed: executed.current }]\n}\n\n/**\n * Hook which works as a facade for the useRequest hook, it can\n * be used to prepare a get request which can be triggered by user\n * actions or programmaticaly\n * @param endpoint\n * @returns\n */\nexport const useGetLazy = (\n    endpoint: string,\n    config?: ApiConfigType\n): [() => Promise<any>, boolean, { executed: boolean }] => {\n    const [sendRequest, loading, { executed }] = useRequest(endpoint, {\n        ...config,\n        method: 'GET'\n    })\n    return [sendRequest, loading, { executed }]\n}\n\n/**\n * Function which executes a get request as soon as the component is loaded.\n * @param endpoint\n * @returns\n */\nexport const useGet = <ResponseType>(\n    endpoint: string,\n    config?: ApiConfigType<{}>\n): [ResponseType, boolean, { refetch: any }] => {\n    const [sendRequest, loading, { executed }] = useGetLazy(endpoint, config)\n    const [dataFetched, setDataFetched] = useState<ResponseType>()\n    const getData = useCallback(async () => {\n        const { data } = await sendRequest()\n        setDataFetched(data)\n    }, [sendRequest])\n\n    useEffect(() => {\n        if (!executed) {\n            getData()\n        }\n    }, [executed, getData])\n\n    return [dataFetched as ResponseType, loading, { refetch: getData }]\n}\n\n/**\n * Facade for the useRequest hook, it overrides the method to be a post\n * @param endpoint\n * @param config\n * @returns\n */\nexport const usePost = <PayloadType = {}>(\n    endpoint: string,\n    config?: ApiConfigType<{}>\n): HookReturnWithPayloadType<PayloadType> => {\n    const [sendRequest, loading, { errors }] = useRequest<PayloadType>(endpoint, {\n        ...config,\n        method: 'POST'\n    })\n    return [sendRequest, loading, { errors }]\n}\n\n/**\n * Facade for the useRequest, it prepares a put request\n * @param endpoint\n * @param config\n * @returns\n */\nexport const usePut = <PayloadType = {}>(\n    endpoint: string,\n    config?: ApiConfigType<{}>\n): HookReturnWithPayloadType<PayloadType> => {\n    const [sendRequest, loading, { errors }] = useRequest<PayloadType>(endpoint, {\n        ...config,\n        method: 'PUT'\n    })\n    return [sendRequest, loading, { errors }]\n}\n\n/**\n * Facade for the useRequest, it prepares a delete request\n * @param endpoint\n * @param config\n * @returns\n */\nexport const useDelete = (endpoint: string, config?: ApiConfigType<{}>): HookReturnType => {\n    const [sendRequest, loading] = useRequest(endpoint, {\n        ...config,\n        method: 'DELETE'\n    })\n    const handleDelete = async (configOverride: ApiConfigType) => {\n        return await sendRequest(undefined, configOverride)\n    }\n    return [handleDelete, loading]\n}\n\n/**\n * Facade for useRequest hook, it prepares a patch request\n * @param endpoint\n * @param config\n * @returns\n */\nexport const usePatch = <PayloadType = {}>(\n    endpoint: string,\n    config?: ApiConfigType<{}>\n): HookReturnWithPayloadType<PayloadType> => {\n    const [sendRequest, loading, { errors }] = useRequest<PayloadType>(endpoint, {\n        ...config,\n        method: 'PATCH'\n    })\n    return [sendRequest, loading, { errors }]\n}\n"],"names":[],"mappings":";;AAEA;;AAEG;MACU,UAAU,CAAA;AACnB;;AAEG;AACc,IAAA,MAAM,CAAQ;AAC/B;;AAEG;AACc,IAAA,SAAS,CAAsB;AAChD;;AAEG;AACK,IAAA,QAAQ,CAAS;AAEzB,IAAA,WAAA,CAAmB,MAAwB,EAAA;AACvC,QAAA,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAA;AACpC,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;AACpB,QAAA,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;KAC7B;AAED;;;;;;;AAOG;AACI,IAAA,aAAa,GAAG,CAAC,GAAW,EAAE,YAAmC,KAAY;QAChF,IAAI,CAAC,YAAY,EAAE;AACf,YAAA,OAAO,GAAG,CAAA;SACb;AACD,QAAA,OAAO,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,GAAG,KAAI;AACpD,YAAA,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAI,CAAA,EAAA,GAAG,CAAG,CAAA,CAAA,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAA;AACtD,YAAA,OAAO,MAAM,CAAA;SAChB,EAAE,GAAG,CAAC,CAAA;AACX,KAAC,CAAA;AAED;;;;;AAKG;AACI,IAAA,eAAe,GAAG,CAAC,IAAY,EAAE,MAAuB,KAAI;AAC/D,QAAA,MAAM,EAAE,MAAM,GAAG,KAAK,EAAE,GAAG,MAAM,CAAA;QACjC,MAAM,GAAG,GAAW,IAAI,CAAC,SAAS,CAAC,IAAI,CAAW,CAAA;AAClD,QAAA,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AACnB,YAAA,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;YAC3C,IAAI,SAAS,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,WAAW,EAAE,EAAE;AAClD,gBAAA,MAAM,IAAI,KAAK,CACX,CAAA,kCAAA,EAAqC,SAAS,CAAA,aAAA,EAAgB,MAAM,CAAC,WAAW,EAAE,CAAI,EAAA,CAAA,CACzF,CAAA;aACJ;AACD,YAAA,OAAO,GAAG,IAAI,CAAC,MAAM,CAAG,EAAA,OAAO,EAAE,CAAA;SACpC;AACD,QAAA,OAAO,GAAG,IAAI,CAAC,MAAM,CAAG,EAAA,GAAG,EAAE,CAAA;AACjC,KAAC,CAAA;AAED;;;;;AAKG;AACI,IAAA,SAAS,GAAG,OACf,QAAgB,EAChB,MAAuB,KAOtB;AACD,QAAA,IAAI;YACA,MAAM,EAAE,OAAO,EAAE,MAAM,GAAG,KAAK,EAAE,GAAG,MAAM,CAAA;YAC1C,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;YAC1D,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAA;AACvE,YAAA,MAAM,cAAc,GAAQ;AACxB,gBAAA,MAAM,EAAE,kBAAkB;AAC1B,gBAAA,cAAc,EAAE,kBAAkB;aACrC,CAAA;AAED,YAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,cAAc,CAAC,eAAe,CAAC,GAAG,UAAU,IAAI,CAAC,QAAQ,CAAA,CAAE,CAAA;aAC9D;AAED,YAAA,MAAM,aAAa,GAAG,MAAM,KAAK,CAAC,aAAa,EAAE;AAC7C,gBAAA,OAAO,EAAE,cAAc;gBACvB,MAAM;AACN,gBAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;AAChC,aAAA,CAAC,CAAA;YACF,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,aAAa,CAAA;AAC9C,YAAA,MAAM,YAAY,GAAG,MAAM,aAAa,CAAC,IAAI,EAAE,CAAA;YAC/C,OAAO;gBACH,MAAM;gBACN,OAAO;gBACP,GAAG;gBACH,OAAO;AACP,gBAAA,QAAQ,EAAE,YAAY;aACzB,CAAA;SACJ;QAAC,OAAO,GAAG,EAAE;AACV,YAAA,MAAM,GAAG,CAAA;SACZ;AACL,KAAC,CAAA;AAED;;;AAGG;AACI,IAAA,WAAW,GAAG,CAAC,KAAc,KAAI;AACpC,QAAA,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;AACzB,KAAC,CAAA;AAED;;;AAGG;AACI,IAAA,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAA;AAC3C;;AC1HM,MAAM,MAAM,GAAG,aAAa,CAAiB,EAAE,CAAC,CAAA;AAEhD,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAA;AACf,MAAM,CAAC;;ACMlC;;;;;AAKG;AACH,MAAM,UAAU,GAA8B,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,KAAI;AAC7F,IAAA,MAAM,MAAM,GAAG,MAAM,CACjB,IAAI,UAAU,CAAC;QACX,MAAM,EAAE,MAAM,IAAI,EAAE;QACpB,SAAS;KACZ,CAAC,CACL,CAAC,OAAO,CAAA;AACT,IAAA,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;AAEzB,IAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;IAE9D,SAAS,CAAC,MAAK;AACX,QAAA,IAAI,MAAM,IAAI,QAAQ,KAAK,KAAK,EAAE;AAC9B,YAAA,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;SAC5B;KACJ,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAA;AAErC,IAAA,QACI,KAAA,CAAA,aAAA,CAAC,WAAW,EAAA,EACR,KAAK,EAAE;YACH,MAAM;SACT,EAEA,EAAA,QAAQ,CACC,EACjB;AACL;;ACxCA;;;AAGG;AACH,MAAM,SAAS,GAAG,MAAK;AACnB,IAAA,OAAO,UAAU,CAAC,MAAM,CAAC,CAAA;AAC7B,CAAC,CAAA;AAED;;;;;AAKG;MACU,UAAU,GAAG,CACtB,QAAgB,EAChB,MAAuC,KACrB;IAClB,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAU,KAAK,CAAC,CAAA;IACtD,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,EAAwB,CAAA;AAC5D,IAAA,MAAM,EAAE,MAAM,EAAE,GAAG,SAAS,EAAE,CAAA;AAC9B,IAAA,MAAM,QAAQ,GAAG,MAAM,CAAU,KAAK,CAAC,CAAA;AACvC;;;;;AAKG;IACH,MAAM,WAAW,GAAG,OAAO,CAAc,EAAE,cAA8B,KAAkB;QACvF,UAAU,CAAC,IAAI,CAAC,CAAA;AAChB,QAAA,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAA;AACvB,QAAA,IAAI;AACA;;;;AAIG;YACH,SAAS,CAAC,SAAS,CAAC,CAAA;YACpB,MAAM,EAAE,QAAQ,EAAE,GACd,CAAC,MAAM,MAAM,EAAE,SAAS,CAAC,QAAQ,EAAE;AAC/B,gBAAA,GAAG,MAAM;AACT,gBAAA,GAAG,cAAc;AACjB,gBAAA,OAAO,EAAE,CAAC;aACb,CAAC,KAAK,EAAE,CAAA;AACb,YAAA,MAAM,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAA;AAC3B,YAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,MAAM,EAAE;gBAC5B,SAAS,CAAC,MAAM,CAAC,CAAA;aACpB;YACD,UAAU,CAAC,KAAK,CAAC,CAAA;AACjB,YAAA,OAAO,QAAe,CAAA;SACzB;QAAC,OAAO,GAAG,EAAE;AACV,YAAA,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;YAClB,UAAU,CAAC,KAAK,CAAC,CAAA;AACjB,YAAA,OAAO,EAAS,CAAA;SACnB;AACL,KAAC,CAAA;AAED,IAAA,OAAO,CAAC,WAAW,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAA;AACzE,EAAC;AAED;;;;;;AAMG;MACU,UAAU,GAAG,CACtB,QAAgB,EAChB,MAAsB,KACgC;AACtD,IAAA,MAAM,CAAC,WAAW,EAAE,OAAO,EAAE,EAAE,QAAQ,EAAE,CAAC,GAAG,UAAU,CAAC,QAAQ,EAAE;AAC9D,QAAA,GAAG,MAAM;AACT,QAAA,MAAM,EAAE,KAAK;AAChB,KAAA,CAAC,CAAA;IACF,OAAO,CAAC,WAAW,EAAE,OAAO,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAA;AAC/C,EAAC;AAED;;;;AAIG;MACU,MAAM,GAAG,CAClB,QAAgB,EAChB,MAA0B,KACiB;AAC3C,IAAA,MAAM,CAAC,WAAW,EAAE,OAAO,EAAE,EAAE,QAAQ,EAAE,CAAC,GAAG,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;IACzE,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,EAAgB,CAAA;AAC9D,IAAA,MAAM,OAAO,GAAG,WAAW,CAAC,YAAW;AACnC,QAAA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,WAAW,EAAE,CAAA;QACpC,cAAc,CAAC,IAAI,CAAC,CAAA;AACxB,KAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAA;IAEjB,SAAS,CAAC,MAAK;QACX,IAAI,CAAC,QAAQ,EAAE;AACX,YAAA,OAAO,EAAE,CAAA;SACZ;AACL,KAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAA;IAEvB,OAAO,CAAC,WAA2B,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAA;AACvE,EAAC;AAED;;;;;AAKG;MACU,OAAO,GAAG,CACnB,QAAgB,EAChB,MAA0B,KACc;AACxC,IAAA,MAAM,CAAC,WAAW,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAc,QAAQ,EAAE;AACzE,QAAA,GAAG,MAAM;AACT,QAAA,MAAM,EAAE,MAAM;AACjB,KAAA,CAAC,CAAA;IACF,OAAO,CAAC,WAAW,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,CAAC,CAAA;AAC7C,EAAC;AAED;;;;;AAKG;MACU,MAAM,GAAG,CAClB,QAAgB,EAChB,MAA0B,KACc;AACxC,IAAA,MAAM,CAAC,WAAW,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAc,QAAQ,EAAE;AACzE,QAAA,GAAG,MAAM;AACT,QAAA,MAAM,EAAE,KAAK;AAChB,KAAA,CAAC,CAAA;IACF,OAAO,CAAC,WAAW,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,CAAC,CAAA;AAC7C,EAAC;AAED;;;;;AAKG;MACU,SAAS,GAAG,CAAC,QAAgB,EAAE,MAA0B,KAAoB;IACtF,MAAM,CAAC,WAAW,EAAE,OAAO,CAAC,GAAG,UAAU,CAAC,QAAQ,EAAE;AAChD,QAAA,GAAG,MAAM;AACT,QAAA,MAAM,EAAE,QAAQ;AACnB,KAAA,CAAC,CAAA;AACF,IAAA,MAAM,YAAY,GAAG,OAAO,cAA6B,KAAI;AACzD,QAAA,OAAO,MAAM,WAAW,CAAC,SAAS,EAAE,cAAc,CAAC,CAAA;AACvD,KAAC,CAAA;AACD,IAAA,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,CAAA;AAClC,EAAC;AAED;;;;;AAKG;MACU,QAAQ,GAAG,CACpB,QAAgB,EAChB,MAA0B,KACc;AACxC,IAAA,MAAM,CAAC,WAAW,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAc,QAAQ,EAAE;AACzE,QAAA,GAAG,MAAM;AACT,QAAA,MAAM,EAAE,OAAO;AAClB,KAAA,CAAC,CAAA;IACF,OAAO,CAAC,WAAW,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,CAAC,CAAA;AAC7C;;;;"}